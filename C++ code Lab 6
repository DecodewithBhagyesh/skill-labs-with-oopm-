//To perform Multiple Inheritance in C++. Create a
student class representing student roll number, name and branch and
an exam class (derived class of student) representing the scores of
the student in various subjects (maths, physics and
chemistry) and sports class representing the score in sports. The sports
and exam class isinherited by a result class which adds the exam marks
and sports score to generate the final result.//



#include<iostream>
using namespace std;

class student {
public:
    int rollno;
    string name;
    string branch;
	
    int get() 
	{
        cout <<"\nEnter the Roll no :";
        cin>>rollno;
        cout<<"\nEnter the student name:";
        cin>>name;
        cout<<"\nEnter your branch: ";
        cin>>branch;
        
    }
};

class exam : public student{
	public:
		int m1,m2,m3;
		
		int getdata()
		{  
			cout<<"\nenter marks in maths out of 100:"<<endl;
			cin>>m1;
			cout<<"\nenter marks in physics out of 100:"<<endl;
			cin>>m2;
			cout<<"\nenter marks in chemistry out of 100:"<<endl;
			cin>>m3;
		}
		
};

class sports  {
    public:
      int sm; // sm = Sports mark
      
      int getsm()
     {
        cout << "\n Enter the sports mark out off 50 :"<<endl;
        cin>>sm;
     }
};

class result : public exam, public sports {
    public:
	int total;
	float p;
	
    int display() 
	{
            total = (m1 + m2 + m3 + sm);
            p= (total*100)/350;
			cout<<"\n"<<endl;
            cout<<"\nReport card:"<<endl;
            cout<<"\nRoll No.: "<<rollno;
            cout<<"\nStudent name:"<<name;
            cout<<"\nBranch: "<<branch;
			cout<<"\nMarks in maths: "<<m1;
			cout<<"\nMarks in physics: "<<m2;
			cout<<"\nMarks in chemistry: "<<m3;
			cout<<"\nScore in sports out of 50 : "<<sm;
			cout<<"\nTotal marks:"<<total;
			cout<<"\nPercentage: "<<p;
    }
};

int main() {
    
    result res;
    res.get();
    res.getdata();
    res.getsm();
    res.display();
    
    return 0;
}







//To perform Hierarchical Inheritance in C++. Create an Employee
class with attributes EmpID and EmpSalary. Also create necessary
methods/constructors to accept these values from the user. Create classes
permenantEmployee and TemporaryEmployee which will be derived classes of
Employee. Mention hike attribute in these derived classes and calculate the
total salary using generate_salary() method for respective types of employees.
Objects of the derived classes should be created and salaries for the
permanent and temporary employees should be calculated and displayed on
the screen.//



#include <iostream>
using namespace std;

class Employee
{
	protected:
	string EmpID = "";

	double Empsalary;

	public:
		Employee()
		{
            cout<<endl<<"Enter employee ID : ";
            cin>>EmpID;
			cout<<endl<<"Enter employee Salary : ";
            cin>>Empsalary;

		}

	void getdata()
	{
		cout <<endl<< "Employee ID is : " << EmpID;
		cout <<endl<<"Total Salary of Employee  is : " << Empsalary;
	}


};

class Permanent_Employee: public Employee
{
	double hike;

	public:

	Permanent_Employee( double increment)
	{
			hike = increment;
	}

    void getdata()
	{
		cout<< "EmployeeID is : " << EmpID;
		cout <<endl<<"Employee Total Salary is : " << generate_salary();
	}

	float generate_salary()
	{
		return (Empsalary + hike);
	}
};

class Temporary_Employee: public Employee
{
	double hike;

	public:

	Temporary_Employee( double increment)
	{
			hike = increment;
	}

    void getdata()
	{
		cout<< "EmployeeID is : " << EmpID;
		cout <<endl<<"Employee Total Salary is : " << generate_salary();
	}

	float generate_salary()
	{
		return (Empsalary + hike);
	}
};

int main()
{

    cout<<"Temporary Employee: ";
	Temporary_Employee T(1050.75);
    cout << endl<<"----Details of Temporary_Employee---" << endl;
	T.getdata();
    cout<<endl<<endl<<"Permanent Employee: ";
	Permanent_Employee P(1750.84);
	cout << endl<< "----Details of Permanent_Employee----" << endl;
	P.getdata();

	return 0;
}
